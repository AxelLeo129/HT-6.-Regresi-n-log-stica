production_companies = c(data$production_companies)
production_companies <- unlist(production_companies)
production_companies <- table(production_companies)
barplot(production_companies, xlab = 'Frecuencia', main = ' Compañias de producción' )
View(data)
splitcasts <- c(data$cast)
splitcasts <- strsplit(splitcasts, "|", fixed = TRUE)
splitcasts <- unlist(splitcasts)
splitcasts <- table(splitcasts)
barplot(splitcasts, xlab = 'Frecuencia', main = 'Actores' )
barplot(production_companies, xlab = 'Frecuencia', main = ' Compañias de producción' )
splitcasts <- c(data$cast)
splitcasts <- strsplit(splitcasts, "|", fixed = TRUE)
splitcasts <- unlist(splitcasts)
splitcasts <- table(splitcasts)
barplot(splitcasts, xlab = 'Frecuencia', main = 'Actores' )
data <- data[with(data,order(-"budget")),]
data5 <- data[with(data,order(-"budget")),]
data5 <- data[with(data,order("budget")),]
View(data5)
data5 <- data[order("budget"),]
View(data5)
View(data5)
data5 <- data[order(budget),]
data5 <- data[order("budget"),]
knitr::opts_chunk$set(echo = TRUE)
library(nortest)
data <-read.csv("C:/Users/LENOVO/Desktop/Clases/Minería de datos/HT/HT1DataMining/data/tmdb-movies.csv")
summary(data)
str(data)
hist(data$popularity[data$popularity != 0],
main = "Histograma sobre popularidad de películas en imdb",
xlab = "Indice de popularidad ",
breaks = 105)
qqnorm(data$popularity, pch = 1, frame = FALSE)
qqline(data$popularity, col = "steelblue", lwd = 2)
lillie.test((data$popularity))
data2 = data[data$budget > 1000000,]
hist(data2$budget,
main = "Histograma para el presupuesto de las películas",
xlab = "Presupuesto",
breaks = 105)
qqnorm(data2$budget, pch = 1, frame = FALSE)
qqline(data2$budget, col = "steelblue", lwd = 2)
lillie.test((data2$budget))
data21 = data[data$revenue > 1000000,]
hist(data21$budget,
main = "Histograma para las ganancias de las películas",
xlab = "Presupuesto",
breaks = 100)
qqnorm(data21$revenue, pch = 1, frame = FALSE)
qqline(data2$revenue, col = "steelblue", lwd = 2)
data3 = data[data$runtime > 30,]
hist(data2$runtime,
main = "Histograma para la duración de las películas",
xlab = "Tiempo (m)",
breaks = 105)
splitPopGenres <- c(data$genres)
splitPopGenres <- strsplit(splitPopGenres, "|", fixed = TRUE)
splitPopGenres <- unlist(splitPopGenres)
splitPopGenres <- table(splitPopGenres)
barplot(splitPopGenres, xlab = 'Frecuencia', main = ' Generos' )
directores = c(data$director)
directores <- unlist(directores)
directores <- table(directores)
barplot(directores, xlab = 'Frecuencia', main = ' directores' )
production_companies = c(data$production_companies)
production_companies <- unlist(production_companies)
production_companies <- table(production_companies)
barplot(production_companies, xlab = 'Frecuencia', main = ' Compañias de producción' )
splitcasts <- c(data$cast)
splitcasts <- strsplit(splitcasts, "|", fixed = TRUE)
splitcasts <- unlist(splitcasts)
splitcasts <- table(splitcasts)
barplot(splitcasts, xlab = 'Frecuencia', main = 'Actores' )
data5 <- data[order(-"budget"),]
data5 <- data[order(-budget),]
data5 <- data[order(-data$budget),]
tail(data5,10)
data5 <- data[order(data$budget),]
tail(data5,10)
tail(data5$original_title,10)
View(data5)
tail(data5$budget,10)
head(data5$budget,10)
head(data5$original_title,10)
data5 <- data[order(-data$budget),]
head(data5$original_title,10)
data6 <- data[order(-data$revenue),]
head(data6$original_title,10)
knitr::opts_chunk$set(echo = TRUE)
library(nortest)
data <-read.csv("C:/Users/LENOVO/Desktop/Clases/Minería de datos/HT/HT1DataMining/data/tmdb-movies.csv")
summary(data)
str(data)
hist(data$popularity[data$popularity != 0],
main = "Histograma sobre popularidad de películas en imdb",
xlab = "Indice de popularidad ",
breaks = 105)
qqnorm(data$popularity, pch = 1, frame = FALSE)
qqline(data$popularity, col = "steelblue", lwd = 2)
lillie.test((data$popularity))
data2 = data[data$budget > 1000000,]
hist(data2$budget,
main = "Histograma para el presupuesto de las películas",
xlab = "Presupuesto",
breaks = 105)
qqnorm(data2$budget, pch = 1, frame = FALSE)
qqline(data2$budget, col = "steelblue", lwd = 2)
lillie.test((data2$budget))
data21 = data[data$revenue > 1000000,]
hist(data21$budget,
main = "Histograma para las ganancias de las películas",
xlab = "Presupuesto",
breaks = 100)
qqnorm(data21$revenue, pch = 1, frame = FALSE)
qqline(data2$revenue, col = "steelblue", lwd = 2)
data3 = data[data$runtime > 30,]
hist(data2$runtime,
main = "Histograma para la duración de las películas",
xlab = "Tiempo (m)",
breaks = 105)
splitPopGenres <- c(data$genres)
splitPopGenres <- strsplit(splitPopGenres, "|", fixed = TRUE)
splitPopGenres <- unlist(splitPopGenres)
splitPopGenres <- table(splitPopGenres)
barplot(splitPopGenres, xlab = 'Frecuencia', main = ' Generos' )
directores = c(data$director)
directores <- unlist(directores)
directores <- table(directores)
barplot(directores, xlab = 'Frecuencia', main = ' directores' )
production_companies = c(data$production_companies)
production_companies <- unlist(production_companies)
production_companies <- table(production_companies)
barplot(production_companies, xlab = 'Frecuencia', main = ' Compañias de producción' )
splitcasts <- c(data$cast)
splitcasts <- strsplit(splitcasts, "|", fixed = TRUE)
splitcasts <- unlist(splitcasts)
splitcasts <- table(splitcasts)
barplot(splitcasts, xlab = 'Frecuencia', main = 'Actores' )
data5 <- data[order(-data$budget),]
head(data5$original_title,10)
data6 <- data[order(-data$revenue),]
head(data6$original_title,10)
install.packages("nbClust")
View(data)
View(data)
install.package(NbClust)
install.packages(NbClust)
install.packages("NbClust")
install.packages("e1071")
install.packages("cluster")
install.packages("mclust")
install.packages("mclust")
install.packages("fpc")
install.packages("factoextra")
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos3),as.factor(prediccion))
t <- proc.time()
model<-glm(as.factor(train$datos2)~., data = train[,c(1:38,42)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos3),as.factor(prediccion))
proc.time()-t
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos3),as.factor(prediccion))
t <- proc.time()
model<-glm(as.factor(train$datos2)~., data = train[,c(1:38,42)],family = binomial(), maxit=100)
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos3),as.factor(prediccion))
proc.time()-t
#<<<<<<< HEAD
#setwd("C:/Users/Kevin Macario/Desktop/Uvg/9no Semestre/Mineria de Datos/HT-6.-Regresi-n-log-stica/house-prices-advanced-regression-techniques")
#datatest <- read.csv('test.csv')
#datatrain <- read.csv('train.csv')
#prices <- read.csv('sample_submission.csv')
#=======
library(caret)
library(dummies)
setwd("C:/Users/LENOVO/Desktop/Clases/Minería de datos/Github/HT-6.-Regresi-n-log-stica")
porcentaje<-0.8
set.seed(666)
prices <- read.csv("house-prices-advanced-regression-techniques/sample_submission.csv")
datatrain <- read.csv("house-prices-advanced-regression-techniques/train.csv")
datos = rbind(datatestc, datatrain)
colSums(is.na(datos))
datos$PoolQC<-NULL
datos$Fence <- NULL
datos$MiscFeature<-NULL
datos$FireplaceQu<-NULL
datos$Alley<-NULL
datos<- datos[complete.cases(datos), ]
mask <- unlist(lapply(datos, is.numeric))
datos_numericos <- datos[,mask]
#<<<<<<< HEAD
#=======
datatest <- read.csv("house-prices-advanced-regression-techniques/test.csv")
#>>>>>>> c524c2669884e3fb364a8e078a53e10658a44119
datatestc = merge(x = datatest, y = prices, by = "Id")
cluster<-kmeans(datos_numericos ,3, iter.max = 200 )
datos$grupo <- cluster$cluster
summary(datos$SalePrice[datos$grupo==1])
summary(datos$SalePrice[datos$grupo==2])
summary(datos$SalePrice[datos$grupo==3])
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
c3 <- rgb(120,160,180, max = 255, alpha = 80, names = "lt.hola")
break1 = floor(sqrt(nrow(datos[datos$grupo ==1,])))
break2 = floor(sqrt(nrow(datos[datos$grupo ==2,])))
break3 = floor(sqrt(nrow(datos[datos$grupo ==3,])))
histo1 <- hist(datos$SalePrice[datos$grupo ==1], breaks  = break1,plot = FALSE )
histo2 <- hist(datos$SalePrice[datos$grupo ==2],breaks = break2, plot = FALSE )
histo3 <- hist(datos$SalePrice[datos$grupo ==3],breaks = break3, plot = FALSE )
plot(histo1, c = c1, xlim = c(4000, 500000 ), ylim = c(0,200), main = "Histogramas 3 clústers", xlab ="Precios")
plot(histo2, c = c2,add = TRUE)
plot(histo3, c = c3,add = TRUE)
library(caret)
library(dummies)
datos<-cbind(datos,dummy(datos$grupo), verbose = T)
mask <- unlist(lapply(datos, is.numeric))
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,mask]
test<-datos[-corte,mask]
#################
c(1:38,40)
t <- proc.time()
model<-glm(as.factor(train$datos1)~., data = train[,c(1:38,40)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos1),as.factor(prediccion))
proc.time()-t
t <- proc.time()
model<-glm(as.factor(train$datos2)~., data = train[,c(1:38,41)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos2),as.factor(prediccion))
proc.time()-t
t <- proc.time()
model<-glm(as.factor(train$datos2)~., data = train[,c(1:38,42)],family = binomial(), maxit=100)
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos3),as.factor(prediccion))
proc.time()-t
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos3),as.factor(prediccion))
#<<<<<<< HEAD
#setwd("C:/Users/Kevin Macario/Desktop/Uvg/9no Semestre/Mineria de Datos/HT-6.-Regresi-n-log-stica/house-prices-advanced-regression-techniques")
#datatest <- read.csv('test.csv')
#datatrain <- read.csv('train.csv')
#prices <- read.csv('sample_submission.csv')
#=======
library(caret)
library(dummies)
setwd("C:/Users/LENOVO/Desktop/Clases/Minería de datos/Github/HT-6.-Regresi-n-log-stica")
porcentaje<-0.8
set.seed(666)
#<<<<<<< HEAD
#=======
datatest <- read.csv("house-prices-advanced-regression-techniques/test.csv")
prices <- read.csv("house-prices-advanced-regression-techniques/sample_submission.csv")
datatrain <- read.csv("house-prices-advanced-regression-techniques/train.csv")
#>>>>>>> c524c2669884e3fb364a8e078a53e10658a44119
datatestc = merge(x = datatest, y = prices, by = "Id")
datos = rbind(datatestc, datatrain)
colSums(is.na(datos))
datos$PoolQC<-NULL
datos$Fence <- NULL
datos$MiscFeature<-NULL
datos$FireplaceQu<-NULL
datos$Alley<-NULL
datos<- datos[complete.cases(datos), ]
mask <- unlist(lapply(datos, is.numeric))
datos_numericos <- datos[,mask]
cluster<-kmeans(datos_numericos ,3, iter.max = 200 )
datos$grupo <- cluster$cluster
summary(datos$SalePrice[datos$grupo==1])
summary(datos$SalePrice[datos$grupo==2])
summary(datos$SalePrice[datos$grupo==3])
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
c3 <- rgb(120,160,180, max = 255, alpha = 80, names = "lt.hola")
break1 = floor(sqrt(nrow(datos[datos$grupo ==1,])))
break2 = floor(sqrt(nrow(datos[datos$grupo ==2,])))
break3 = floor(sqrt(nrow(datos[datos$grupo ==3,])))
histo1 <- hist(datos$SalePrice[datos$grupo ==1], breaks  = break1,plot = FALSE )
histo2 <- hist(datos$SalePrice[datos$grupo ==2],breaks = break2, plot = FALSE )
histo3 <- hist(datos$SalePrice[datos$grupo ==3],breaks = break3, plot = FALSE )
plot(histo1, c = c1, xlim = c(4000, 500000 ), ylim = c(0,200), main = "Histogramas 3 clústers", xlab ="Precios")
plot(histo2, c = c2,add = TRUE)
plot(histo3, c = c3,add = TRUE)
library(caret)
library(caret)
library(dummies)
datos<-cbind(datos,dummy(datos$grupo), verbose = T)
mask <- unlist(lapply(datos, is.numeric))
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,mask]
test<-datos[-corte,mask]
#################
c(1:38,40)
t <- proc.time()
model<-glm(as.factor(train$datos1)~., data = train[,c(1:38,40)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos1),as.factor(prediccion))
proc.time()-t
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos1),as.factor(prediccion))
model<-glm(as.factor(train$datos1)~., data = train[,c(1:38,40)],family = binomial(), maxit=100)
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos1),as.factor(prediccion))
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(train$datos1),as.factor(prediccion))
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(train$datos2),as.factor(prediccion))
t <- proc.time()
model<-glm(as.factor(train$datos2)~., data = train[,c(1:38,41)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos2),as.factor(prediccion))
proc.time()-t
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(train$datos2),as.factor(prediccion))
t <- proc.time()
model<-glm(as.factor(train$datos2)~., data = train[,c(1:38,42)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos3),as.factor(prediccion))
proc.time()-t
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(train$datos3),as.factor(prediccion))
t <- proc.time()
model<-glm(as.factor(train$datos2)~., data = train[,c(1:38,42)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos3),as.factor(prediccion))
proc.time()-t
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(train$datos3),as.factor(prediccion))
t <- proc.time()
model<-glm(as.factor(train$datos2)~., data = train[,c(1:38,42)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos3),as.factor(prediccion))
proc.time()-t
model<-glm(as.factor(train$datos2)~., data = train[,c(1:38,42)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
pred<-predict(model,newdata = test[,1:38], type = "response")
t <- proc.time()
model<-glm(as.factor(train$datos2)~., data = train[,c(1:38,42)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
t <- proc.time()
model<-glm(as.factor(train$datos1)~., data = train[,c(1:38,40)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos1),as.factor(prediccion))
proc.time()-t
model<-glm(as.factor(train$datos2)~., data = train[,c(1:38,42)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
model<-glm(as.factor(train$datos2)~., data = train[,c(1:38,42)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
model<-glm(as.factor(train$datos3)~., data = train[,c(1:38,42)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos2),as.factor(prediccion))
proc.time()-t
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(train$datos2),as.factor(prediccion))
t <- proc.time()
model<-glm(as.factor(train$datos3)~., data = train[,c(1:38,42)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos3),as.factor(prediccion))
proc.time()-t
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(train$datos3),as.factor(prediccion))
model<-glm(as.factor(train$datos3)~., data = train[,c(1:38,42)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos3),as.factor(prediccion))
proc.time()-t
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(train$datos3),as.factor(prediccion))
confusionMatrix(as.factor(test$datos1),as.factor(prediccion))
setwd("D:/AxelFolder/University/mineria_de_datos/HT-6.-Regresi-n-log-stica")
#<<<<<<< HEAD
#setwd("C:/Users/Kevin Macario/Desktop/Uvg/9no Semestre/Mineria de Datos/HT-6.-Regresi-n-log-stica/house-prices-advanced-regression-techniques")
#datatest <- read.csv('test.csv')
#datatrain <- read.csv('train.csv')
#prices <- read.csv('sample_submission.csv')
#=======
library(caret)
library(dummies)
porcentaje<-0.8
set.seed(666)
datatest <- read.csv("house-prices-advanced-regression-techniques/test.csv")
prices <- read.csv("house-prices-advanced-regression-techniques/sample_submission.csv")
datatrain <- read.csv("house-prices-advanced-regression-techniques/train.csv")
datatestc = merge(x = datatest, y = prices, by = "Id")
datos = rbind(datatestc, datatrain)
colSums(is.na(datos))
datos$PoolQC<-NULL
datos$Fence <- NULL
datos$MiscFeature<-NULL
datos$FireplaceQu<-NULL
datos$Alley<-NULL
datos<- datos[complete.cases(datos), ]
mask <- unlist(lapply(datos, is.numeric))
datos_numericos <- datos[,mask]
cluster<-kmeans(datos_numericos ,3, iter.max = 200 )
datos$grupo <- cluster$cluster
summary(datos$SalePrice[datos$grupo==1])
summary(datos$SalePrice[datos$grupo==2])
summary(datos$SalePrice[datos$grupo==3])
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
c3 <- rgb(120,160,180, max = 255, alpha = 80, names = "lt.hola")
break1 = floor(sqrt(nrow(datos[datos$grupo ==1,])))
break2 = floor(sqrt(nrow(datos[datos$grupo ==2,])))
break3 = floor(sqrt(nrow(datos[datos$grupo ==3,])))
histo1 <- hist(datos$SalePrice[datos$grupo ==1], breaks  = break1,plot = FALSE )
histo2 <- hist(datos$SalePrice[datos$grupo ==2],breaks = break2, plot = FALSE )
histo3 <- hist(datos$SalePrice[datos$grupo ==3],breaks = break3, plot = FALSE )
plot(histo1, c = c1, xlim = c(4000, 500000 ), ylim = c(0,200), main = "Histogramas 3 clústers", xlab ="Precios")
plot(histo2, c = c2,add = TRUE)
plot(histo3, c = c3,add = TRUE)
datos<-cbind(datos,dummy(datos$grupo), verbose = T)
mask <- unlist(lapply(datos, is.numeric))
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,mask]
test<-datos[-corte,mask]
t <- proc.time()
model<-glm(as.factor(train$datos1)~., data = train[,c(1:38,40)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos1),as.factor(prediccion))
proc.time()-t
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(train$datos1),as.factor(prediccion))
t <- proc.time()
model<-glm(as.factor(train$datos1)~., data = train[,c(1:38,40)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos1),as.factor(prediccion))
proc.time()-t
t <- proc.time()
model<-glm(as.factor(train$datos1)~., data = train[,c(1:38,40)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos1),as.factor(prediccion))
proc.time()-t
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(train$datos1),as.factor(prediccion))
t <- proc.time()
model<-glm(as.factor(train$datos1)~., data = train[,c(1:38,40)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos1),as.factor(prediccion))
proc.time()-t
t <- proc.time()
model<-glm(as.factor(train$datos1)~., data = train[,c(1:38,40)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos1),as.factor(prediccion))
proc.time()-t
t <- proc.time()
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(train$datos1),as.factor(prediccion))
proc.time()-t
t <- proc.time()
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(train$datos1),as.factor(prediccion))
proc.time()-t
t <- proc.time()
model<-glm(as.factor(train$datos2)~., data = train[,c(1:38,41)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos2),as.factor(prediccion))
proc.time()-t
t <- proc.time()
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(train$datos2),as.factor(prediccion))
proc.time()-t
t <- proc.time()
model<-glm(as.factor(train$datos3)~., data = train[,c(1:38,42)],family = binomial(), maxit=100)
pred<-predict(model,newdata = test[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(test$datos3),as.factor(prediccion))
proc.time()-t
t <- proc.time()
pred<-predict(model,newdata = train[,1:38], type = "response")
prediccion<-ifelse(pred>=0.5,1,0)
confusionMatrix(as.factor(train$datos3),as.factor(prediccion))
proc.time()-t
